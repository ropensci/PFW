[{"path":[]},{"path":"https://Visorbearer.github.io/PFW/CONTRIBUTING.html","id":"bugs-and-fixes","dir":"","previous_headings":"","what":"Bugs and Fixes","title":"Contributing to PFW","text":"feedback? Please submit bugs, typos, improvements issue pull request!","code":""},{"path":"https://Visorbearer.github.io/PFW/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code Contributions","title":"Contributing to PFW","text":"contribute new/edited code: Fork repository GitHub account Make changes additions forked repository, sure pull latest PFW version upstream first Provide new tests accompany new functionality ’ve added, Submit pull request link","code":""},{"path":"https://Visorbearer.github.io/PFW/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to PFW","text":"Please note PFW project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://Visorbearer.github.io/PFW/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2025  Mason Maron  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. PFW  Copyright (C) 2025  Mason Maron This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://Visorbearer.github.io/PFW/articles/PFW.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Introduction to PFW","text":"Project FeederWatch community-driven survey backyard birds across North America. collaborative effort Cornell Lab Ornithology Birds Canada, FeederWatch contributors survey “backyards, nature centers, community areas, locales” November - April. Thousands contributors submit data species counts, habitat information, feeder type, . Despite name, feeders required! Project FeederWatch’s consistent, site-based data structure spanning multiple decades makes valuable resource modeling changes distribution abundance 100 bird species throughout North America. vignette serves download prepare Project FeederWatch Dataset statistical analysis modeling. workflow broken three primary sections: first section focuses downloading importing Project FeederWatch data. second section outlines PFW functions filtering preparing data, output “final” dataset ready analyses. third section outlines peripheral PFW functions established support usability efficiency.","code":""},{"path":"https://Visorbearer.github.io/PFW/articles/PFW.html","id":"accessing-and-importing-project-feederwatch-data","dir":"Articles","previous_headings":"","what":"Accessing and Importing Project FeederWatch Data","title":"Introduction to PFW","text":"working Project FeederWatch data, three main datasets needed: raw checklist data, site description data, species translation table. first two self-explanatory, species translation table less direct. table allows later filtering using common scientific names, may accessible compared species codes comes pre-installed within PFW. files can manually downloaded https://feederwatch.org/explore/raw-dataset-requests/, provide functions download within R.","code":""},{"path":"https://Visorbearer.github.io/PFW/articles/PFW.html","id":"downloading-and-importing-raw-data","dir":"Articles","previous_headings":"Accessing and Importing Project FeederWatch Data","what":"Downloading and Importing Raw Data","title":"Introduction to PFW","text":"first step using Project FeederWatch data download raw datasets, contain species counts sites alongside supplementary data. files can quite large, data files broken year ranges, 1996-2000 2006-2010. download data want, can use pfw_download function year range years ’d like download. Note must select least one year within function. example: download two files: file containing data 1996-2000, file containing data 2001-2005, year ranges overlap selected years. default, create directory “data-raw/” within local directory download data , can designate different path preferred. next step run pfw_import bring download R session. , can also apply filters, including filtering year. filter arguments passed, pfw_import just import data files downloaded. can always filter data import calling pfw_filter– later. ’s example data imported Washington 2001-2003: chose different file path pfw_download, ’ll want enter “data_raw” example. Alternatively, example dataset provided, pre-filtered data Washington Oregon 2020 - May 2024. can call dataset easily Project FeederWatch currently uses eBird/Clements Taxonomy, species translation table species codes raw data regularly updated. , situations may arise translation table included package date compared raw data ’ve downloaded. can easily fixed running typing “y” asked want overwrite existing file. download recent version species translation table directly Project FeederWatch website. Finally, many analyses may want Project FeederWatch data likely include site metadata, habitat, feeder type, housing density. point running pfw_import, can run pfw_sitedata active data R, like example: automatically download recent site metadata Project FeederWatch website save “data-raw” folder “site_data.csv” default. However, can save path preferred. also automatically merge site data active data. negatively impact future filtering efforts. , data need PFW processing R session ready work !","code":"pfw_download(2000:2003) data_raw <- pfw_import(year = 2002:2003, region = \"Washington\") data <- pfw_example # or pfw_example update_taxonomy() data <- pfw_import() data <- pfw_sitedata(data, \"data-raw/site_data.csv\") # \"data-raw\" is once again the default path, but you can select a different path if preferred"},{"path":[]},{"path":"https://Visorbearer.github.io/PFW/articles/PFW.html","id":"filtering-your-data","dir":"Articles","previous_headings":"Filtering and Zerofilling Project FeederWatch Data","what":"Filtering your data","title":"Introduction to PFW","text":"Now data imported ready go, ’ll want clean analyses. quickest easiest way pfw_filter, function may used earlier pfw_import. pfw_filter consolidates several standalone filtering functions one call convenience, including: pfw_region, filters geographic region (e.g., state, province, country code), pfw_species, filters species using scientific name, common name, species code, pfw_date, filters year /month (including wrapped month ranges around end year), pfw_rollup, “rolls ” taxonomy remove hybrids, slashes, “spuhs” demotes subspecies species level. can use combination filters within single pfw_filter call, default, rollup set TRUE pfw_filter used. can also control whether reviewed valid records included using reviewed valid arguments within pfw_filter. record submitted Project FeederWatch flagged automatic process manual review, system suspects may incorrect invalid. record valid yet reviewed false . reviewed deemed invalid, true reviewed false valid. reviewed accepted, true. Per Bonter & Greig (2021), records submitted Project FeederWatch accepted without issue need review, default valid true reviewed false. default behavior pfw_filter include data valid true; records valid false used caution. ’d prefer apply filters individually, can use like examples: Additionally, Project FeederWatch season extended years, may want limit data latest possible start date earliest possible end date included years number days. optional filtering, can run filter data include records 312th day year 93rd day.","code":"region_list <- c(\"Washington\", \"US-OR\", \"CA-BC\") # Region names or abbreviations are accepted species_list <- c(\"Lawrence's Goldfinch\", \"Spinus tristis\", \"lesgol\") # Common/scientific names or species codes are accepted data_filtered <- pfw_filter(   data,    region = region_list,    species = species_list,    year = 2002:2003,    month = 11:2   ) data_westcoast <- pfw_region(data, c(\"Washington\", \"Oregon\", \"California\")) # Filter for Dark-eyed Junco, Song Sparrow, and Spotted Towhee data_my_yard <- pfw_species(data, c(\"Dark-eyed Junco\", \"Melospiza melodia\", \"spotow\")) data_filtered <- pfw_date(data, year = 2001:2023, month = 11:2) data_rolled <- pfw_rollup(data) data_truncated <- pfw_truncate(data)"},{"path":"https://Visorbearer.github.io/PFW/articles/PFW.html","id":"zerofilling-your-data","dir":"Articles","previous_headings":"Filtering and Zerofilling Project FeederWatch Data","what":"Zerofilling your data","title":"Introduction to PFW","text":"’ve filtered data liking, ’ll clean “presence-” dataset. However, presence/absence data often required modeling analysis. , ’ll want zerofill starting analyses. Project FeederWatch data relies counts birds detected, data bird detected, required presence/absence analysis. example, survey 20 Lesser Goldfinches say just – HOW_MANY == 20– survey Lesser Goldfinches data instead HOW_MANY == 0. Zerofilling infers zero counts species dataset detected setting HOW_MANY == 0 survey instances (SUB_ID values) species reported. can done number species, including full dataset, aware can take long time produce large files applied large datasets. zerofill data, can follow example: ’s easy! ’s done, data ready presence/absence analyses. Behind scenes, PFW saves filtering steps attributes dataset. run pfw_zerofill(), uses attributes apply regional, temporal, taxonomic filters full, original dataset identifying SUB_IDs. ensures zerofilling applied within filters ’ve set still includes survey instances counts species data.","code":"data_zf <- pfw_zerofill(data)"},{"path":"https://Visorbearer.github.io/PFW/articles/PFW.html","id":"helper-functions","dir":"Articles","previous_headings":"","what":"Helper functions","title":"Introduction to PFW","text":"use PFW, may want check things make sure ’re following along data filtering steps. , ’ve also included two “helper” functions package. first, pfw_attr, can used print list filters ’ve applied data. set attributes used zerofilling make sure zerofilled sample matches . can called like : helper function included pfw_dictionary. function allows call upon Project FeederWatch Data Dictionary, downloaded part PFW. can call Data Dictionary : print list variables dataset, alongside definition description. Alternatively, can called certain variable name selected, print definition description variable entered.","code":"pfw_attr(data) pfw_dictionary() pfw_dictionary(\"LOC_ID\")"},{"path":"https://Visorbearer.github.io/PFW/articles/PFW.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"Introduction to PFW","text":"PFW built code originally developed Project FeederWatch data preparation Maron et al. (2025). function scripts package created specifically PFW, code based benefited greatly examples code snippets provided Emma Greig, passed away prior package’s creation.","code":""},{"path":"https://Visorbearer.github.io/PFW/articles/PFW.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction to PFW","text":"","code":"Bonter, D. N. and E. I. Greig (2020). “Project FeederWatch Raw Data”. Mendeley Data, V1.  Bonter, D. N. and E. I. Greig (2021). Over 30 Years of Standardized Bird Counts at Supplementary Feeding Stations in North America: A Citizen Science Data Report for Project FeederWatch. Front. Ecol. Evol. 9:619682.  Clements, J. F., P. C. Rasmussen, T. S. Schulenberg, M. J. Iliff, T. A. Fredericks, J. A. Gerbracht, D. Lepage, A. Spencer, S. M. Billerman, B. L. Sullivan, M. Smith, and C. L. Wood (2024). The eBird/Clements checklist of Birds of the World.  Maron, M. W., E. I. Greig, and J. Boersma (2025). Climate and Landscape Modification Facilitate Range Expansion in *Spinus psaltria* (Lesser Goldfinch) across the Pacific Northwest. Ornithology ukaf013.  Project FeederWatch. Project Overview. FeederWatch.org. https://feederwatch.org/about/project-overview/."},{"path":"https://Visorbearer.github.io/PFW/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mason W. Maron. Author, maintainer. Sunny Tseng. Reviewer. Paul Carteron. Reviewer.","code":""},{"path":"https://Visorbearer.github.io/PFW/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mason W. Maron (2025). PFW: Tools Filtering Processing Data Project FeederWatch. R package version 0.1.0. https://github.com/ropensci/PFW","code":"@Manual{,   title = {PFW: Filtering and Processing Data from Project FeederWatch},   author = {Mason W. Maron},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/ropensci/PFW}, }"},{"path":[]},{"path":"https://Visorbearer.github.io/PFW/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Filtering and Processing Data from Project FeederWatch","text":"PFW R package designed easy filtering, preparation, management data Project FeederWatch. Project FeederWatch community-driven project initiated 1980s run Cornell Lab Ornithology Birds Canada compiles bird observations thousands “backyards, nature centers, community areas, locales” across North America. Project FeederWatch data easy access, can often tricky work ; PFW serves simplify streamline use data. Included PFW tools taxonomic rollup, filtering survey characteristics (species, state, etc.), merging site metadata, zerofilling presence/absence modeling. FeederWatch locations 1989-2020. Figure Bonter & Greig (2021), licensed CC 4.0.","code":""},{"path":"https://Visorbearer.github.io/PFW/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Filtering and Processing Data from Project FeederWatch","text":"PFW can installed using:","code":"install.packages(\"PFW\")"},{"path":"https://Visorbearer.github.io/PFW/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Filtering and Processing Data from Project FeederWatch","text":"Background details using PFW filter process Project FeederWatch data outlined vignette.","code":""},{"path":"https://Visorbearer.github.io/PFW/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Filtering and Processing Data from Project FeederWatch","text":"cite PFW publications, use: Maron, M. W. (2025). PFW: Filtering Processing Data Project FeederWatch. R package version 0.1.0. https://github.com/ropensci/PFW can also run R PFW loaded.","code":"citation(\"PFW\")"},{"path":"https://Visorbearer.github.io/PFW/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Filtering and Processing Data from Project FeederWatch","text":"simple example shows basic Project FeederWatch importing, filtering, zerofilling, site data attachment. , ’ll load example dataset filter Song Sparrow, Dark-eyed Junco, Spotted Towhee Washington Oregon 2022 2024 November-February. , ’ll zerofill data attach site metadata:","code":"library(PFW)  # Load in the included example dataset data <- pfw_example # If you were using your own selection of PFW data,                        # this would be pfw_import() instead. # pfw_import() creates and defaults to \"/data-raw\" in a local directory,  # but will accept a different filepath.  # Create a list of study species species_list <- c(\"Song Sparrow\", \"Dark-eyed Junco\", \"Spotted Towhee\")  # Create a list of study regions region_list <- c(\"Washington\", \"Oregon\")  # Filter data by species and region, from 2022–2024 during November-February data_filtered <- pfw_filter(data,   region = region_list,   species = species_list,   year = 2022:2024,   month = 11:2, # pfw_date(), which is called within pfw_filter(),                  # will appropriately wrap this around the end of the year.   valid = TRUE, # TRUE by default   rollup = TRUE # TRUE by default )  # Output: # 2 regions successfully filtered. # Date filtering complete. # Species roll-up complete. 36 ambiguous records removed. # 3 species successfully filtered. # Filtering complete. 23538 records remaining.  # View the filters that were applied pfw_attr(data_filtered)  # Output: # Filters applied to this dataset: # # - Filter type: region  #  Values: Washington, Oregon  # # - Filter type: date  #   year : 2022, 2023, 2024  #   month : 11, 12, 1, 2  # # - Filter type: rollup  #  Values: TRUE  # # - Filter type: valid  #  Values: TRUE  # # - Filter type: species  #  Values: song sparrow, dark-eyed junco, spotted towhee   # Zerofill missing species/survey instance combos data_zf <- pfw_zerofill(data_filtered)  # Attach site description metadata # Replace \"path/sitedata.csv\" with the actual path to the downloaded file data_full <- pfw_sitedata(data_zf, path = \"path/sitedata.csv\") # If the file does not exist at that path, pfw_sitedata will # download it there from the Project FeederWatch website. # Alternatively, you can manually download the site description file from: # https://feederwatch.org/explore/raw-dataset-requests/"},{"path":"https://Visorbearer.github.io/PFW/index.html","id":"feedback","dir":"","previous_headings":"","what":"Feedback","title":"Filtering and Processing Data from Project FeederWatch","text":"feedback? Please submit bugs, typos, improvements issue pull request! insights help improve PFW. Please note PFW released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://Visorbearer.github.io/PFW/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Filtering and Processing Data from Project FeederWatch","text":"PFW built code originally developed Project FeederWatch data preparation Maron et al. (2025). function scripts package created specifically PFW, code based benefited greatly examples code snippets provided Emma Greig, passed away prior package’s creation.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"View Filter Attributes on Manipulated Project FeederWatch Data — pfw_attr","title":"View Filter Attributes on Manipulated Project FeederWatch Data — pfw_attr","text":"function allows users view filters applied filtered Project FeederWatch dataset printing recorded filter attributes readable format.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View Filter Attributes on Manipulated Project FeederWatch Data — pfw_attr","text":"","code":"pfw_attr(data)"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View Filter Attributes on Manipulated Project FeederWatch Data — pfw_attr","text":"data filtered Project FeederWatch dataset.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View Filter Attributes on Manipulated Project FeederWatch Data — pfw_attr","text":"named list applied filters.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View Filter Attributes on Manipulated Project FeederWatch Data — pfw_attr","text":"","code":"if (FALSE) { # interactive() # Download/load example dataset data <- pfw_example  # Filter for Dark-eyed Junco filtered_data <- pfw_species(data, \"Dark-eyed Junco\")  # View filters applied to your active data pfw_attr(filtered_data) }"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Project FeederWatch Data by Month and/or Year — pfw_date","title":"Filter Project FeederWatch Data by Month and/or Year — pfw_date","text":"function filters Project FeederWatch data year /month, allowing range-based filtering wrapping months around new years.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Project FeederWatch Data by Month and/or Year — pfw_date","text":"","code":"pfw_date(data, year = NULL, month = NULL)"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Project FeederWatch Data by Month and/or Year — pfw_date","text":"data Project FeederWatch dataset. year Optional. Integer vector years (e.g. 2010 2010:2015). month Optional. Integer vector months (1–12). Supports wrapping (e.g. c(11:2) = Nov–Feb).","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Project FeederWatch Data by Month and/or Year — pfw_date","text":"filtered dataset date filter attributes.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Project FeederWatch Data by Month and/or Year — pfw_date","text":"","code":"if (FALSE) { # interactive() # Download/load example dataset data <- pfw_example  # Filter by a single year data_2021 <- pfw_date(data, year = 2021)  # Filter by multiple years data_2123 <- pfw_date(data, year = 2021:2023)  # Filter by a single month data_feb <- pfw_date(data, month = 2)  # Filter by a span of months data_winter <- pfw_date(data, month = 11:2)  # Filter by both year and month data_filtered <- pfw_date(data, year = 2021:2023, month = 11:2) }"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Look Up Definitions from the Project FeederWatch Data Dictionary — pfw_dictionary","title":"Look Up Definitions from the Project FeederWatch Data Dictionary — pfw_dictionary","text":"function helps users explore FeederWatch dataset viewing full data dictionary searching definitions specific variables.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Look Up Definitions from the Project FeederWatch Data Dictionary — pfw_dictionary","text":"","code":"pfw_dictionary(variable = NULL)"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Look Up Definitions from the Project FeederWatch Data Dictionary — pfw_dictionary","text":"variable (Optional) variable name (e.g., \"LOC_ID\") look . NULL, prints full dictionary.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Look Up Definitions from the Project FeederWatch Data Dictionary — pfw_dictionary","text":"printed description (variable) full dictionary.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Look Up Definitions from the Project FeederWatch Data Dictionary — pfw_dictionary","text":"","code":"# View the whole data dictionary pfw_dictionary() #> Variable:   LOC_ID #> Definition: Unique identifier for each survey site #> Description:Each observation location should have only one LOC_ID. A single observer may maintain more than one LOC_ID. This is the same field as LOC_ID in the site description dataset and can be used to link the observation data to the site description data in conjunction with PROJ_PERIOD_ID. #>  #> Variable:   LATITUDE #> Definition: Latitude in decimal degrees for each survey site #> Description:Accuracy varies. See ENTRY_TECHNIQUE below.  #>  #> Variable:   LONGITUDE #> Definition: Longitude in decimal degrees for each survey site #> Description:Accuracy varies. See ENTRY_TECHNIQUE below.  #>  #> Variable:   SUBNATIONAL1_CODE #> Definition: Country abbreviation and State or Province abbreviation of each survey site #> Description:Format XX-XX where the left two letters indicate the country and the right two letters indicate the state or province code. E.g., CA-ON = Canada - Ontario #>  #> Variable:   ENTRY_TECHNIQUE #> Definition: Variable indicating method of site localization #> Description:Codes represent dozens of methods for site creation with varying degrees of specificity. These methods continue to evolve as online mapping technologies change. The most accurate locations have higher \"zoom level\" values (e.g., Google Map Zoom level 9). Note that postal code locations were geolocated at the centroid of the postal code within which the site is located (i.e., these sites lack accuracy and are not useful if you are trying to link to site to satellite-derived land cover data, for instance). #>  #> Variable:   SUB_ID #> Definition: Unique identifier for each checklist #> Description: #>  #> Variable:   OBS_ID #> Definition: Unique identifier for each observation of a species #> Description:One SUB_ID will have as many OBS_ID values as there were species reported on a given checklist.  #>  #> Variable:   MONTH #> Definition: Month of 1st day of two-day observation period #> Description: #>  #> Variable:   DAY #> Definition: Day of 1st day of two-day observation period #> Description: #>  #> Variable:   YEAR #> Definition: Year of 1st day of two-day observation period #> Description: #>  #> Variable:   PROJ_PERIOD_ID #> Definition: Calendar year of end of FeederWatch season #> Description:In the format 'PFW_2019' where PFW = Project FeederWatch. The year indicates the FeederWatch season which is defined as the year the season ended. E.g., the November 2018 through April 2019 season is labeled 'PFW_2019'. This is the same field as PROJ_PERIOD_ID in the site description dataset and can be used to link the observation data to the site description data in conjunction with LOC_ID. #>  #> Variable:   SPECIES_CODE #> Definition: Bird species observed, stored as 6-letter species codes #> Description:Species codes are based on the eBird taxonomy. See \"Species Codes\" tab below for code translations.  #>  #> Variable:   alt_full_spp_code #> Definition: Alternate code for bird species observed, lumping subspecies/recognizable forms #> Description:This column enables someone to \"roll up\" information on subspecies and recognizable forms into the species code of the full species instead of the code for the recognizable form. The species code values for the subspecies/forms are still the primary information stored in the column SPECIES_CODE, but the alternate code for the full species is available in the column immediately to its right. #>  #> Variable:   HOW_MANY #> Definition: Maximum number of individuals seen at one time during observation period #> Description: #>  #> Variable:   VALID #> Definition: Validity of each observation based on flagging system #> Description:1 = observation did not trigger the automated review system or was reviewed and approved. 0 = observation triggered the automated review system and has either not been reviewed or was reviewed and left as 'invalid'. Use 0 records with extreme caution. Details of the review process: Bonter, D.N. and C.B. Cooper. 2012. Data validation in citizen science: A case study from Project FeederWatch. Frontiers in Ecology and the Environment 10:305-307. #>  #> Variable:   REVIEWED #> Definition: Review state of each observation based on flagging system #> Description:1 = observation was reviewed by FeederWatch staff. 0 = observation either did not trigger the automated review system or has not yet been reviewed. Details of the review process: Bonter, D.N. and C.B. Cooper. 2012. Data validation in citizen science: A case study from Project FeederWatch. Frontiers in Ecology and the Environment 10:305-307. #>  #> Variable:   PLUS_CODE #> Definition: Variable indicating if the total number of a species seen was larger than the value reported #> Description:Data field used on historic paper data forms (no longer being populated). Due to space limitations of the paper forms, some large flock sizes could not be recorded accurately. In such a case, the \"PLUS_CODE\" field is coded as '1', indicating that the number of birds seen was larger than that reported in the \"HOW_MANY\" field. Observations where PLUS_CODE = 1 and HOW_MANY = 9, 90, 99, or 999 should be used with caution.  #>  #> Variable:   DAY1_AM #> Definition: Variable indicating if observer watched during morning of count Day 1 #> Description:0 = observer did not watch their feeders during the morning of Day 1; 1 = observer did watch their feeders during this time interval. We suggest adding the values in the DAY1_AM, DAY1_PM, DAY2_AM and DAY2_PM fields into an aggregated measure of effort indicating the number of half days of observation effort (range = 1-4).  #>  #> Variable:   DAY1_PM #> Definition: Variable indicating if observer watched during afternoon of count Day 1 #> Description:See DAY1_AM #>  #> Variable:   DAY2_AM #> Definition: Variable indicating if observer watched during morning of count Day 2 #> Description:See DAY1_AM #>  #> Variable:   DAY2_PM #> Definition: Variable indicating if observer watched during afternoon of count Day 2 #> Description:See DAY1_AM #>  #> Variable:   EFFORT_HRS_ATLEAST #> Definition: Participant estimate of survey time  for each checklist #> Description:A second measure of observation effort. Categorical: 0.001 = less than 1 hour of observation during the 2-day count period;   1.001 = 1 to 4 hours of observation; 4.001 = 4 to 8 hours of observation; 8.001 = greater than 8 hours of observation.  #>  #> Variable:   SNOW_DEP_ATLEAST #> Definition: Participant estimate of minimum snow depth during a checklist #> Description:An estimate of snow depth. Categorical: . = null; 0 = none; 0.001 = less than 5 cm; 5.000 = 5 to 15 cm; 15.001 = greater than 15 cm #>  #> Variable:   DATA_ENTRY_METHOD #> Definition: Data entry method for each checklist (e.g., web, mobile app or paper form) #> Description:As of 2020, the three modes of data entry for the dataset include paper data forms (field value indicates 'paper'), the FeederWatch website (field value indicates various versions of 'Web' entry), or the mobile phone app (field value indicates various versions of 'Mobile' entry).  #>  #> Variable:   Yard_type #> Definition: Variables indicating features of yard (*five fields) #> Description:0 = absent, 1 = present for each category of yard type: Pavement (no vegetation), garden or courtyard, landscaped yard, natural vegetation, natural or landscaped desert. #>  #> Variable:   Habitat_type #> Definition: Variables indicating features of surrounding habitat (*fourteen fields) #> Description:0 = absent, 1 = present for the following habitat types located within 0.5 miles of the count site: deciduous woods, evergreen woods, mixed deciduous-evergreen woods, orchard, park, fresh water, salt water, residential area, industrial or commercial, agricultural fields, desert or scrub, secondary growth woods, swamp (wooded), marsh). #>  #> Variable:   Trees/shrubs #> Definition: Variables indicating types of surrounding vegetation (*six fields) #> Description:Minimum number of trees or shrubs of various types within the count area. EVGR = evergreen; DCID = deciduous, FRU = fruit, CACTI = cacti. Note that this field has been inconsistently recorded over time. Current (2020) categories: 0, 1-3, 4-10, > 10. #>  #> Variable:   Brush/water #> Definition: Variables indicating presence of brush piles or water sources (*three fields) #> Description:Categorical. Minimum number of brush piles, water sources, and bird baths located within the count area. Note that categories changed slightly over the years. Generally, categories represent: 0, 1-3, 4-10, > 10. #>  #> Variable:   NEARBY_FEEDERS #> Definition: Variable indicating if other feeders are regularly operated within 90m of survey site #> Description:Present or absence of feeders (others than those maintained by the participant) within 90 m of the count site. 0 = feeders absent, 1 = feeders present.  #>  #> Variable:   Other_animals #> Definition: Variables indicating if squirrels, cats, dogs or humans are at the survey site (*four fields) #> Description:0 = no, 1 = yes. Do squirrels take food from feeders at least 3 times per week? Are cats, dogs, or humans active within 30 m of the feeders for at least 30 minutes 3 days per week?  #>  #> Variable:   HOUSING_DENSITY #> Definition: Participant estimated housing density of neighborhood #> Description:Participant-defined description of the housing density of the neighborhood. 1 = \"rural\", 2 = \"rural/suburban\", 3 = \"suburban\", 4 = \"urban\" #>  #> Variable:   Feeding_schedule #> Definition: Variables indicating which months of the year participants provide food (*thirteen fields) #> Description:0 = no, 1 = yes. Response to the following question for each month, \"I provided food in my count site at least once per week.\" Note that the field indicating whether or not the participant provides food year-round (FED_YR_ROUND) has not be consistently applied throughout the history of the project.  #>  #> Variable:   Feeder_numbers_by_type #> Definition: Variables indicating the number and types of feeders provided (*eight fields) #> Description:Participants report the number of feeders maintained within their count site. Suet or fat feeders, ground feeding sites, hanging feeders, platform feeders, sugar water feeders (HUMMING), water dispensers (field retired in 2005), thistle feeders (field retired in 2005), fruit feeders.  #>  #> Variable:   POPULATION_ATLEAST #> Definition: Participant estimated population of city or town #> Description:1 = less than 5,000; 5001 = 5,001 - 25,000; 25001 = 25,001 - 100,000; 100001 = > 100,000. #>  #> Variable:   COUNT_AREA_SIZE_SQ_M_ATLEAST #> Definition: Participant estimated area of survey site #> Description:0.01 = < 1 square meter; 1.01 = 1 to 100 square meters; 100.01 = 100 - 375 square meters; 375.01 = > 375 square meters #>  #> Variable:   CREATION_DT #> Definition: Date of site creation #> Description:All sites created prior to 2001 are listed as created in 2001. #>  #> Variable:   LAST_EDITED_DT #> Definition: Date of last site location edit #> Description:Lists the most recent date site-specific data was edited. #>  #> Variable:   supp_food #> Definition: Participant indicates whether supplementary food was provided (1) or not provided (0) at the site #> Description:Variable added during the 2021-2022 FeederWatch season, this variable allows people to indicate if they watched birds within a fixed area but did not provide supplemental food (i.e., watching an area that they landscaped for birds but with no direct bird feeding). 1 = supplemental food provided, 0 = supplemental food NOT provided, null before the 2021-22 season could be interpreted as food provided because FeederWatch was explicitly focused on bird feeding stations.  #>   # View the data dictionary entry for location ID (\"LOC_ID\") pfw_dictionary(\"LOC_ID\") #> Variable:   LOC_ID #> Definition: Unique identifier for each survey site #> Description:Each observation location should have only one LOC_ID. A single observer may maintain more than one LOC_ID. This is the same field as LOC_ID in the site description dataset and can be used to link the observation data to the site description data in conjunction with PROJ_PERIOD_ID."},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Raw Project FeederWatch Data by Year — pfw_download","title":"Download Raw Project FeederWatch Data by Year — pfw_download","text":"function downloads raw data selected years Project FeederWatch website. unzips downloaded data saves .csv files local folder (default: \"data-raw/\"), removing zip files afterward. download files required cover user-selected years.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Raw Project FeederWatch Data by Year — pfw_download","text":"","code":"pfw_download(years, folder = NULL)"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Raw Project FeederWatch Data by Year — pfw_download","text":"years Integer vector years (e.g., 2001, 2001:2023, c(1997, 2001, 2023)). Data available 1998 present. folder folder Project FeederWatch data stored. Default \"data-raw/\" local directory.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Raw Project FeederWatch Data by Year — pfw_download","text":"Invisibly returns downloaded files.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Raw Project FeederWatch Data by Year — pfw_download","text":"","code":"if (FALSE) { # interactive() # Download data from 2001-2006 into the default folder pfw_download(years = 2001:2006) }"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Project FeederWatch Dataset — pfw_example","title":"Example Project FeederWatch Dataset — pfw_example","text":"sample dataset demonstration testing purposes. dataset includes data 2020 - May 2024 Washington Oregon.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Project FeederWatch Dataset — pfw_example","text":"","code":"pfw_example"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Project FeederWatch Dataset — pfw_example","text":"data frame 556,814 rows 24 columns.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Project FeederWatch Dataset — pfw_example","text":"Created using pfw_download() pfw_import() data-raw/pfw_example.R","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Project FeederWatch Dataset — pfw_example","text":"","code":"# Load the example data into the environment data(pfw_example)  # Assign the example dataset testing_data <- pfw_example"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Multiple Filters to Project FeederWatch Data — pfw_filter","title":"Apply Multiple Filters to Project FeederWatch Data — pfw_filter","text":"function filters Project FeederWatch data species, region, data validity.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Multiple Filters to Project FeederWatch Data — pfw_filter","text":"","code":"pfw_filter(   data,   species = NULL,   region = NULL,   year = NULL,   month = NULL,   valid = TRUE,   reviewed = NULL,   rollup = TRUE )"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Multiple Filters to Project FeederWatch Data — pfw_filter","text":"data Project FeederWatch dataset. species (Optional) character vector species names (common scientific). region (Optional) character vector region names (e.g., \"Washington\", \"British Columbia\"). year (Optional) Integer vector years (e.g., 2010 2010:2015). month (Optional) Integer vector months (1–12). Supports wrapping (e.g., 11:2 = Nov–Feb). valid (Optional, default = TRUE) Filter invalid data. Removes rows VALID == 0. reviewed (Optional) specified, filters review status (TRUE reviewed, FALSE unreviewed). rollup (Optional, default = TRUE) Automatically roll subspecies species level remove spuhs, slashes, hybrids.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Multiple Filters to Project FeederWatch Data — pfw_filter","text":"filtered dataset.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Multiple Filters to Project FeederWatch Data — pfw_filter","text":"","code":"if (FALSE) { # interactive() # Download/load example dataset data <- pfw_example  # Filter for Dark-eyed Junco, Song Sparrow, and Spotted Towhee in Washington in 2023 data_masonsyard <- pfw_filter(   data,   species = c(\"daejun\", \"sonspa\", \"spotow\"),   region = \"US-WA\",   year = 2023 )  # Filter for all data from Washington, Oregon, or California from November # through February for 2021 through 2023 data_westcoastwinter <- pfw_filter(   data,   region = c(\"Washington\", \"Oregon\", \"California\"),   year = 2021:2023,   month = 11:2 )  # Filter for Greater Roadrunner in California, keeping only reviewed # records and disabling taxonomic rollup data_GRRO_CA <- pfw_filter(   data,   species = \"Greater Roadrunner\",   region = \"California\",   reviewed = TRUE,   rollup = FALSE )  # Filter for Fox Sparrow with rollup rollFOSP <- pfw_filter(pfw_example, species = \"Fox Sparrow\", rollup = TRUE) # Taxonomic rollup complete. 116 ambiguous records removed. # 1 species successfully filtered. # Filtering complete. 8070 records remaining.  # Filter for Fox Sparrow without rollup norollFOSP <- pfw_filter(pfw_example, species = \"Fox Sparrow\", rollup = FALSE) # 1 species successfully filtered. # Filtering complete. 7745 records remaining.  # 116 records were identified to subspecies (e.g. \"Fox Sparrow (Sooty)\", # listed as 'foxsp2' in SPECIES_CODE) # These records are merged into the parent \"Fox Sparrow\" total with rollup, # but excluded in favor of records only identified exactly as # \"Fox Sparrow\" (no subspecies, only SPECIES_CODE = 'foxspa') if rollup = FALSE. }"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_import.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Project FeederWatch Data — pfw_import","title":"Import Project FeederWatch Data — pfw_import","text":"function reads .csv files downloaded Project FeederWatch website, either default \"data-raw/\" folder created pfw_download() user-specified folder. Optionally, can apply filters like region, species, year, etc. .csv files import can downloaded via pfw_download() Project FeederWatch website.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Project FeederWatch Data — pfw_import","text":"","code":"pfw_import(folder = NULL, filter = FALSE, ...)"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Project FeederWatch Data — pfw_import","text":"folder folder Project FeederWatch data stored. Default \"data-raw/\" local directory. filter Logical. TRUE, applies filters using pfw_filter(). Default FALSE. ... Additional arguments passed pfw_filter() filtering (e.g., region, species, year).","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Project FeederWatch Data — pfw_import","text":"combined optionally filtered dataset containing Project FeederWatch data.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_import.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Project FeederWatch Data — pfw_import","text":"","code":"if (FALSE) { # \\dontrun{ # This example cannot be run without user-downloaded data! This data can # be downloaded manually or with pfw_download().  # Import all downloaded data from the default folder (\"data-raw\") data <- pfw_import()  # Import and filter for Washington checklists from 2023 data_filtered <- pfw_import(filter = TRUE, region = \"Washington\", year = 2023) } # }"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Project FeederWatch Data by Region — pfw_region","title":"Filter Project FeederWatch Data by Region — pfw_region","text":"function filters Project FeederWatch data include specified states, provinces, countries.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Project FeederWatch Data by Region — pfw_region","text":"","code":"pfw_region(data, regions)"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Project FeederWatch Data by Region — pfw_region","text":"data Project FeederWatch dataset. regions character vector regions (e.g., \"Washington\", \"United States\").","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Project FeederWatch Data by Region — pfw_region","text":"filtered dataset containing selected regions.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Project FeederWatch Data by Region — pfw_region","text":"","code":"if (FALSE) { # interactive() # Download/load example dataset data <- pfw_example  # Filter for data only from Washington using the state name data_WA <- pfw_region(data, \"Washington\")  # Filter for data only from Washington using the state code data_WA <- pfw_region(data, \"US-WA\")  # Filter for data from Washington, Oregon, # and California using the state name data_westcoastbestcoast <- pfw_region(data, c(\"Washington\", \"Oregon\", \"California\")) }"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_rollup.html","id":null,"dir":"Reference","previous_headings":"","what":"Do Taxonomic Rollup on Project FeederWatch Data — pfw_rollup","title":"Do Taxonomic Rollup on Project FeederWatch Data — pfw_rollup","text":"function removes spuhs, hybrids, slashes \"demotes\" subspecies/subspecies intergrades parent species.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_rollup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do Taxonomic Rollup on Project FeederWatch Data — pfw_rollup","text":"","code":"pfw_rollup(data)"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_rollup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do Taxonomic Rollup on Project FeederWatch Data — pfw_rollup","text":"data Project FeederWatch dataset.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_rollup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do Taxonomic Rollup on Project FeederWatch Data — pfw_rollup","text":"cleaned dataset species-level codes rollup attribute.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_rollup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do Taxonomic Rollup on Project FeederWatch Data — pfw_rollup","text":"","code":"# Download/load example dataset data <- pfw_example  # Apply taxonomic rollup to an active PFW dataset rolled_data <- pfw_rollup(data) #> Taxonomic rollup complete. 116 ambiguous records removed."},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_sitedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Site Metadata into Project FeederWatch Data — pfw_sitedata","title":"Merge Site Metadata into Project FeederWatch Data — pfw_sitedata","text":"function joins habitat site metadata Project FeederWatch observation data using site description file.site metadata file found, downloaded automatically designated path \"data-raw\" path selected.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_sitedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Site Metadata into Project FeederWatch Data — pfw_sitedata","text":"","code":"pfw_sitedata(data, path)"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_sitedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Site Metadata into Project FeederWatch Data — pfw_sitedata","text":"data Project FeederWatch dataset. path File path site description .csv https://feederwatch.org/explore/raw-dataset-requests/. specified, defaults \"data-raw/sitedata.csv\".","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_sitedata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Site Metadata into Project FeederWatch Data — pfw_sitedata","text":"original dataset site metadata merged .","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_sitedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Site Metadata into Project FeederWatch Data — pfw_sitedata","text":"","code":"if (FALSE) { # interactive() # Download/loads the example dataset data <- pfw_example  # Merge site metadata into example observation data data_sites <- pfw_sitedata(data, \"data-raw/site_data.csv\") }"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Project FeederWatch Data by Species — pfw_species","title":"Filter Project FeederWatch Data by Species — pfw_species","text":"function filters Project FeederWatch data include selected species, common names scientific names via species translation table.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Project FeederWatch Data by Species — pfw_species","text":"","code":"pfw_species(data, species, suppress_ambiguous = FALSE)"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Project FeederWatch Data by Species — pfw_species","text":"data Project FeederWatch dataset. species character vector species names (common, scientific, six-letter species code). suppress_ambiguous (Optional, default = FALSE) TRUE/FALSE including missing subspecies warning. just silencer pfw_filter function.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Project FeederWatch Data by Species — pfw_species","text":"filtered dataset containing selected species.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Project FeederWatch Data by Species — pfw_species","text":"","code":"if (FALSE) { # interactive() # Download/load example dataset data <- pfw_example  # Filter for only Greater Roadrunner using the common name data_GRRO <- pfw_species(data, \"Greater Roadrunner\")  # Filter for Lesser Goldfinch and American Goldfinch using scientific names data_goldfinches <- pfw_species(data, c(\"Spinus psaltria\", \"Spinus tristis\"))  # Filter for Dark-eyed Junco, Song Sparrow, and Spotted Towhee using species codes data_masonsyard <- pfw_species(data, c(\"daejun\", \"sonspa\", \"spotow\"))  # Filter with a pre-existing species list species_list <- c(\"daejun\", \"sonspa\", \"spotow\") data_masonsyard <- pfw_species(data, species_list) }"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_truncate.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Project FeederWatch Data to ","title":"Filter Project FeederWatch Data to ","text":"Project FeederWatch's Data Users Guide (https://birdscanada.github.io/BirdsCanada_PFW/Start2.html) Suggests data truncated date avoid biases years Project FeederWatch survey season extended. function filters data include observations within typical FeederWatch season: November 8 April 3.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_truncate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Project FeederWatch Data to ","text":"","code":"pfw_truncate(data)"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_truncate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Project FeederWatch Data to ","text":"data Project FeederWatch dataset Year, Month, Day columns.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_truncate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Project FeederWatch Data to ","text":"filtered dataset limited Nov 8 – Apr 3 across years.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_truncate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Project FeederWatch Data to ","text":"","code":"# Download/load example dataset data <- pfw_example  # Truncate an active PFW dataset to November 8 - April 3 truncated_data <- pfw_truncate(data) #> Data filtered to standard PFW season window."},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_zerofill.html","id":null,"dir":"Reference","previous_headings":"","what":"Zerofill Species not Detected in each Survey Instance for Analysis — pfw_zerofill","title":"Zerofill Species not Detected in each Survey Instance for Analysis — pfw_zerofill","text":"function adds zeros checklists selected species absent, setting HOW_MANY = 0 presence/absence-based analyses. Note zerofilling entire, unfiltered datasets Project FeederWatch take long time!","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_zerofill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zerofill Species not Detected in each Survey Instance for Analysis — pfw_zerofill","text":"","code":"pfw_zerofill(data)"},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_zerofill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zerofill Species not Detected in each Survey Instance for Analysis — pfw_zerofill","text":"data Project FeederWatch dataset, optionally filtered species.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_zerofill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zerofill Species not Detected in each Survey Instance for Analysis — pfw_zerofill","text":"dataset zerofilled values included species.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/pfw_zerofill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zerofill Species not Detected in each Survey Instance for Analysis — pfw_zerofill","text":"","code":"if (FALSE) { # \\dontrun{ # This example cannot be run because it relies on a cached version of the # data which is created upon using pfw_import(). Storing a version of this # for the example dataset would be too large for CRAN!  # Zerofill a PFW  dataset data_zf <- pfw_zerofill(data) } # }"},{"path":"https://Visorbearer.github.io/PFW/reference/region_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Region Lookup Table — region_lookup","title":"Region Lookup Table — region_lookup","text":"region lookup table, maps SUBNATIONAL1_CODE values region \"common\" names.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/region_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Region Lookup Table — region_lookup","text":"","code":"region_lookup"},{"path":"https://Visorbearer.github.io/PFW/reference/region_lookup.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Region Lookup Table — region_lookup","text":"data frame 2 columns: Code Region code (e.g., \"US-WA\") Area Full area name (e.g., \"Washington\")","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/update_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the Project FeederWatch Species Translation Table — update_taxonomy","title":"Update the Project FeederWatch Species Translation Table — update_taxonomy","text":"function downloads latest species translation table Project FeederWatch website saves local directory. previous version exists local directory, user asked confirmation overwriting . ensures taxonomy can readily kept date annually, since manually updated PFW website otherwise.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/update_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the Project FeederWatch Species Translation Table — update_taxonomy","text":"","code":"update_taxonomy(user_dir = tools::R_user_dir(\"PFW\", \"data\"))"},{"path":"https://Visorbearer.github.io/PFW/reference/update_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the Project FeederWatch Species Translation Table — update_taxonomy","text":"user_dir Optional. custom directory write translation table . Using default local directory highly recommended.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/update_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the Project FeederWatch Species Translation Table — update_taxonomy","text":"message confirming whether update successful.","code":""},{"path":"https://Visorbearer.github.io/PFW/reference/update_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the Project FeederWatch Species Translation Table — update_taxonomy","text":"","code":"if (FALSE) { # interactive() # Prompt a species translation table taxonomy update update_taxonomy() }"},{"path":"https://Visorbearer.github.io/PFW/news/index.html","id":"pfw-010","dir":"Changelog","previous_headings":"","what":"PFW 0.1.0","title":"PFW 0.1.0","text":"CRAN release: 2025-07-09 Accepted OpenSci version/initial CRAN submission. Switched httr2 webpage interactions Made pfw_example file prepackaged within PFW Added example pfw_rollup() within pfw_filter() Added region lookup table prepackaged dataset Added typo correction suggestions pfw_region() pfw_species()","code":""},{"path":"https://Visorbearer.github.io/PFW/news/index.html","id":"pfw-001","dir":"Changelog","previous_headings":"","what":"PFW 0.0.1","title":"PFW 0.0.1","text":"Initial OpenSci submission.","code":""}]
